{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAeAC,SAASC,cAAc,SAASC,iBAAiB,UAAUC,MAAOC,IAChEA,EAAMC,iBAEN,MAAMC,EAAaN,SAASC,cAAc,uBACpCM,EAAYP,SAASC,cAAc,sBACnCO,EAAcR,SAASC,cAAc,wBAErCQ,EAAQC,OAAOJ,EAAWK,OAC1BC,EAAOF,OAAOH,EAAUI,OACxBE,EAASH,OAAOF,EAAYG,OAElCL,EAAWK,MAAQ,GACnBJ,EAAUI,MAAQ,GAClBH,EAAYG,MAAQ,GAEpB,IAAIG,EAAeL,EAEnB,MAAMM,EAAgBZ,MAAOa,EAAUC,KACrC,IACE,MAAMC,QAhCZ,SAAuBF,EAAUC,GAC/B,OAAO,IAAIE,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEJ,E,MAAUC,IAEpBI,EAAO,C,SAAEL,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAuBcS,CAAcV,EAAUC,GAC7CU,EAAA7B,GAAS8B,OAAOC,QAAQ,uBAAqBX,EAAIF,eAAoBE,EAAED,U,CACvE,MAAOa,GACPH,EAAA7B,GAAS8B,OAAOG,QAAQ,sBAAoBD,EAAEd,eAAmBc,EAAEb,U,GAIjEe,EAAW,GAEjB,GAAa,IAATpB,EACF,IAAK,IAAIqB,EAAI,EAAGA,GAAKpB,EAAQoB,IAC3BD,EAASE,KAAKnB,EAAckB,EAAGxB,SAGjC,IAAK,IAAI0B,EAAI,EAAGA,GAAKtB,EAAQsB,IAC3BH,EAASE,KAAKnB,EAAcoB,EAAGrB,IAC/BA,GAAgBF,QAIdO,QAAQiB,IAAIJ,EAAS","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\ndocument.querySelector('.form').addEventListener('submit', async (event) => {\n  event.preventDefault();\n\n  const delayInput = document.querySelector('input[name=\"delay\"]');\n  const stepInput = document.querySelector('input[name=\"step\"]');\n  const amountInput = document.querySelector('input[name=\"amount\"]');\n\n  const delay = Number(delayInput.value);\n  const step = Number(stepInput.value);\n  const amount = Number(amountInput.value);\n\n  delayInput.value = '';\n  stepInput.value = '';\n  amountInput.value = '';\n\n  let currentDelay = delay;\n\n  const handlePromise = async (position, delay) => {\n    try {\n      const result = await createPromise(position, delay);\n      Notiflix.Notify.success(`✅ Fulfilled promise ${result.position} in ${result.delay}ms`);\n    } catch (error) {\n      Notiflix.Notify.failure(`❌ Rejected promise ${error.position} in ${error.delay}ms`);\n    }\n  };\n\n  const promises = [];\n\n  if (step === 0) {\n    for (let i = 1; i <= amount; i++) {\n      promises.push(handlePromise(i, delay));\n    }\n  } else {\n    for (let i = 1; i <= amount; i++) {\n      promises.push(handlePromise(i, currentDelay));\n      currentDelay += step;\n    }\n  }\n\n  await Promise.all(promises);\n});"],"names":["$7Y9D8","parcelRequire","document","querySelector","addEventListener","async","event","preventDefault","delayInput","stepInput","amountInput","delay1","Number","value","step","amount","currentDelay","handlePromise","position","delay","result","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$47d4ff9957288465$var$createPromise","$parcel$interopDefault","Notify","success","error","failure","promises","i","push","i1","all"],"version":3,"file":"03-promises.89791fa9.js.map"}